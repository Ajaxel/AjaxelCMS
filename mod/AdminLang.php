<?php

/**
* Ajaxel CMS v8.0
* http://ajaxel.com
* =================
* 
* Copyright (c) 2007-2016, Alexander Shatalov <ajaxel.com@gmail.com>. All rights reserved.
* 
* The software, this file and its contents are subject to the Ajaxel CMS
* License. Please read the license.txt file before using, installing, copying,
* modifying or distribute this file or part of its contents. The contents of
* this file is part of the source code of Ajaxel CMS.
* 
* @file       mod/AdminLang.php
* @category   Content management system
* @package    Ajaxel CMS
* @version    8.0, 15:25 2015-12-23
* @copyright  Copyright (c) 2007-2016, Alexander Shatalov <ajaxel.com@gmail.com>. All rights reserved.
* @license    http://ajaxel.com/license.txt
*/

final class AdminLang extends Admin {

	public function __construct() {
		$this->title = 'Vocabulary';
		parent::__construct(__CLASS__);
	}
	public function init() {
		$this->table = 'lang';
		$this->button['save'] = true;
	}

	public function sql() {
		if (!$this->all['lang']) {
			$this->select = 'id, text_'.$this->lang.' AS text, `name`';
			if ($this->find) {
				$this->filter .= ' AND (name LIKE  \'%'.$this->find.'%\' OR text_'.$this->lang.' LIKE \'%'.$this->find.'%\')';
			}
		} else {
			$this->select = '`id`, `name`';
			$or = '';
			foreach ($this->langs as $l => $x) {
				$this->select .= ', `text_'.$l.'`';
				$or .= ' OR text_'.$l.' LIKE \'%'.$this->find.'%\'';
			}
			if ($this->find) {
				$this->filter .= ' AND (name LIKE \'%'.$this->find.'%\''.$or.')';
				
			}
		}
		if ($this->template) {
			$this->filter .= ' AND template='.e($this->template);	
		}
		else {
			$this->filter .= ' AND (template LIKE '.e($this->Index->Session->Template).' OR template=\'admin\')';
		}
		$this->order = '`name`';
		$this->limit = 50;
		$this->offset = get('p')*$this->limit;
	}
	
	private function fixstr($s) {
	//	$s = str_replace('\\\'','\'',$s);
		$s = str_replace('\\\\\'','\\\'',$s);
		$s = addslashes(trim($s));
		$s = str_replace('\"','"',$s);
		return $s;	
	}
	
	private function writeToFile($lang = false, $template = false) {
		if (!$lang) {
			if ($this->all['lang']) {
				foreach ($this->langs as $l => $x) {
					$this->writeToFile($l,$this->tpl);
					$this->writeToFile($l,'admin');
				}
			} else {
				$this->writeToFile($this->lang,$this->tpl);
				$this->writeToFile($this->lang,'admin');
			}
			return;
		}
		$file = FTP_DIR_ROOT.'config/lang/lang_'.$template.'_'.$lang.'.php';
		$n = "\n";
		$t = "\t";
		$c = '<?php'.$n.$n.'/**'.$n.'* Ajaxel CMS v'.Site::VERSION.$n.'* Public translations for "'.$this->langs[$lang][0].'" language and for "'.$template.'" template.'.$n.'* Generated on '.date('H:i d-m-Y').' from http://'.$_SERVER['HTTP_HOST'].$n.'* DO NOT EDIT THIS FILE, USE ADMINISTRATION PANEL INSTEAD'.$n.'*/'.$n.$n;
		//$where = 'WHERE name NOT LIKE \'$%\'';
		$qry = DB::qry('SELECT text_'.$lang.' AS text, name FROM '.DB_PREFIX.$this->table.' WHERE template='.e($template).' AND text_'.$lang.'!=\'\' GROUP BY name ORDER BY name',0,0);
		while ($rs = DB::fetch($qry)) {
			$c .= '$_lang[\''.$this->fixstr($rs['name']).'\'] = \''.$this->fixstr($rs['text']).'\';'.$n;
		}
		DB::free($qry);
		$c .= $n.$n.$n;
		$qry = DB::qry('SELECT text_'.$lang.' AS text, name FROM '.DB_PREFIX.$this->table.' WHERE template='.e($template).' AND text_'.$lang.'=\'\' GROUP BY name ORDER BY name',0,0);
		while ($rs = DB::fetch($qry)) {
			$c .= '$_lang[\''.$this->fixstr($rs['name']).'\'] = \''.$this->fixstr($rs['text']).'\';'.$n;
		}
		DB::free($qry);
		if (Admin::filePHPok($c)) {
			file_put_contents($file,$c);
		} else {
			d('PHP error in:
'.$c.'

Unable to save to '.$file.'');	
		}
	}
	
	private function fromFile($l) {
		$_lang = array();
		$file = FTP_DIR_ROOT.'config/lang/lang_'.$this->template.'_'.$l.'.php';
		if (!is_file($file)) return;
		require $file;
		$i = 0;
		foreach ($_lang as $k => $v) {
			if (!$v) continue;
			DB::run('UPDATE '.DB_PREFIX.'lang SET text_'.$l.'='.e($v).' WHERE template=\''.$this->template.'\' AND name='.e($k).'');
			if (DB::affected()) $i++;
			else {
				DB::noerror();
				DB::insert('langs',array(
					'name'		=> $k,
					'template'	=> $this->template,
					'text_'.$l	=> $v
				));
			}
		}
		return $i;
	}
	
	public function listing() {
		if (get('do')=='replace') {
			if (!($allow = Allow()->admin('lang','save'))) {
				$aff = 0;
				if ($this->all['lang']) {
					foreach ($this->langs as $l => $a) {
						$aff += $this->fromFile($l);
					}
				} else {
					$aff += $this->fromFile($this->lang);	
				}
				$this->msg_text = lang('$Done! %1 phrases were saved',$aff);	
				$this->msg_reload = false;
			}
		}
		
		$this->sql();
		if (!$this->isEdit() && $this->submitted) {
			if (!($allow = Allow()->admin('lang','save'))) {
				
				if ($_POST['data_key'][0] && $_POST['data_val'][0] && !DB::one('SELECT 1 FROM '.DB_PREFIX.'lang WHERE name LIKE '.e($_POST['data_key'][0]).' AND template='.e($this->tpl))) {					
					if ($this->all['lang']) {
						$data = array(
							'name'		=> $_POST['data_key'][0],
							'template'	=> $this->tpl,
						);
						foreach ($this->langs as $l => $x) {
							$data['text_'.$l] = $_POST['data_val'][0][$l];
						}
						DB::insert('lang',$data);
					} else {
						$data = array(
							'name'		=> $_POST['data_key'][0],
							'template'	=> $this->tpl,
						);
						foreach ($this->langs as $l => $x) {
							$data['text_'.$l] = $_POST['data_val'][0];
						}
						DB::insert('lang',$data);
					}
				}
				
				
				if (post('data_del') && is_array($_POST['data_del'])) {
					foreach ($_POST['data_del'] as $id => $to_del) {
						if (!$to_del) continue;
						DB::run('DELETE FROM '.DB_PREFIX.$this->table.' WHERE id='.(int)$id);
						unset($_POST['data_val'][$id]);
					}
				}
				if (post('data_val') && is_array($_POST['data_val'])) {
					foreach ($_POST['data_val'] as $id => $val) {
						if ($this->all['lang']) {
							$data = array();
							foreach ($this->langs as $l => $x) {
								$data['text_'.$l] = $val[$l];
							}
							DB::update($this->table, $data, (int)$id);
						} else {
							if (!strlen(trim($val))) {
								if ($this->lang=='en') {
									DB::run('UPDATE '.DB_PREFIX.$this->table.' SET text_'.$this->lang.'=name WHERE id='.(int)$id);
								}
							} else {
								DB::run('UPDATE '.DB_PREFIX.$this->table.' SET text_'.$this->lang.'='.e($val).' WHERE id='.(int)$id);
							}
						}
					}
				}
				$this->writeToFile();
			} else {
				$this->msg_text = $allow['text'];
				$this->msg_delay = $allow['delay'];
				$this->msg_type = $allow['type'];
			}
		}

		$sql = 'SELECT SQL_CALC_FOUND_ROWS '.$this->select.' FROM '.DB_PREFIX.$this->table.' WHERE TRUE'.$this->filter.' ORDER BY '.$this->order.' LIMIT '.$this->offset.','.$this->limit;
		$qry = DB::run($sql);
		while ($rs = DB::fetch($qry)) {
			if ($this->all['lang']) {
				foreach ($this->langs as $l => $x) {
					$rs['text'][$l] = strform($rs['text_'.$l]);
					unset($rs['text_'.$l]);	
				}
			} else {
				$rs['text'] = strform($rs['text']);	
			}
			$rs['name'] = strform($rs['name']);
			$this->data[] = $rs;
		}

		$this->total = DB::rows();
		$this->nav();
		$this->json_data = json($this->data);
		
	}
}